name: CI

on:
  push:
    branches:
      - "master"
  pull_request:
    branches:
      - "master"
  schedule:
    # Nightly tests run on master by default:
    #   Scheduled workflows run on the latest commit on the default or base branch.
    #   (from https://help.github.com/en/actions/reference/events-that-trigger-workflows#scheduled-events-schedule)
    - cron: "0 0 * * *"


jobs:
  unix:
    runs-on: ${{ matrix.os }}
    name: ${{ matrix.name }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: Linux CUDA 10.0
            os: ubuntu-latest
            python-version: "3.6"
            cuda-version: "10.0"
            OPENCL: false
            CMAKE_FLAGS: |
              -DOPENMM_BUILD_CUDA_TESTS=OFF \
              -DOPENMM_BUILD_OPENCL_TESTS=OFF \
              -DOPENMM_BUILD_CPU_LIB=OFF \
              -DOPENMM_BUILD_PYTHON_WRAPPERS=OFF \
              -DOPENMM_BUILD_REFERENCE_TESTS=OFF \
              -DOPENMM_BUILD_SERIALIZATION_TESTS=OFF \
              -DOPENMM_BUILD_C_AND_FORTRAN_WRAPPERS=OFF \
              -DOPENMM_BUILD_EXAMPLES=OFF \
              -DOPENCL_LIBRARY=/usr/local/cuda-10.0/lib64/libOpenCL.so \
              -DCUDA_CUDART_LIBRARY=/usr/local/cuda-10.0/lib64/libcudart.so \
              -DCUDA_NVCC_EXECUTABLE=/usr/local/cuda-10.0/bin/nvcc \
              -DCUDA_SDK_ROOT_DIR=/usr/local/cuda-10.0/ \
              -DCUDA_TOOLKIT_INCLUDE=/usr/local/cuda-10.0/include \
              -DCUDA_TOOLKIT_ROOT_DIR=/usr/local/cuda-10.0/ \

          - name: Linux CUDA 10.1
            os: ubuntu-latest
            python-version: "3.6"
            OPENCL: false
            cuda-version: "10.1"
            CMAKE_FLAGS: |
              -DOPENMM_BUILD_CUDA_TESTS=OFF \
              -DOPENMM_BUILD_OPENCL_TESTS=OFF \
              -DOPENMM_BUILD_CPU_LIB=OFF \
              -DOPENMM_BUILD_PYTHON_WRAPPERS=OFF \
              -DOPENMM_BUILD_REFERENCE_TESTS=OFF \
              -DOPENMM_BUILD_SERIALIZATION_TESTS=OFF \
              -DOPENMM_BUILD_C_AND_FORTRAN_WRAPPERS=OFF \
              -DOPENMM_BUILD_EXAMPLES=OFF \
              -DOPENCL_LIBRARY=/usr/local/cuda-10.1/lib64/libOpenCL.so \
              -DCUDA_CUDART_LIBRARY=/usr/local/cuda-10.1/lib64/libcudart.so \
              -DCUDA_NVCC_EXECUTABLE=/usr/local/cuda-10.1/bin/nvcc \
              -DCUDA_SDK_ROOT_DIR=/usr/local/cuda-10.1/ \
              -DCUDA_TOOLKIT_INCLUDE=/usr/local/cuda-10.1/include \
              -DCUDA_TOOLKIT_ROOT_DIR=/usr/local/cuda-10.1/ \

          - name: Linux CUDA 10.2
            os: ubuntu-latest
            python-version: "3.6"
            OPENCL: false
            cuda-version: "10.2"
            CMAKE_FLAGS: |
              -DOPENMM_BUILD_CUDA_TESTS=OFF \
              -DOPENMM_BUILD_OPENCL_TESTS=OFF \
              -DOPENMM_BUILD_CPU_LIB=OFF \
              -DOPENMM_BUILD_PYTHON_WRAPPERS=OFF \
              -DOPENMM_BUILD_REFERENCE_TESTS=OFF \
              -DOPENMM_BUILD_SERIALIZATION_TESTS=OFF \
              -DOPENMM_BUILD_C_AND_FORTRAN_WRAPPERS=OFF \
              -DOPENMM_BUILD_EXAMPLES=OFF \
              -DOPENCL_LIBRARY=/usr/local/cuda-10.2/lib64/libOpenCL.so \
              -DCUDA_CUDART_LIBRARY=/usr/local/cuda-10.2/lib64/libcudart.so \
              -DCUDA_NVCC_EXECUTABLE=/usr/local/cuda-10.2/bin/nvcc \
              -DCUDA_SDK_ROOT_DIR=/usr/local/cuda-10.2/ \
              -DCUDA_TOOLKIT_INCLUDE=/usr/local/cuda-10.2/include \
              -DCUDA_TOOLKIT_ROOT_DIR=/usr/local/cuda-10.2/ \

          - name: Linux CUDA 11.0
            os: ubuntu-latest
            python-version: "3.6"
            OPENCL: false
            cuda-version: "11.0"
            CMAKE_FLAGS: |
              -DOPENMM_BUILD_CUDA_TESTS=OFF \
              -DOPENMM_BUILD_OPENCL_TESTS=OFF \
              -DOPENMM_BUILD_CPU_LIB=OFF \
              -DOPENMM_BUILD_PYTHON_WRAPPERS=OFF \
              -DOPENMM_BUILD_REFERENCE_TESTS=OFF \
              -DOPENMM_BUILD_SERIALIZATION_TESTS=OFF \
              -DOPENMM_BUILD_C_AND_FORTRAN_WRAPPERS=OFF \
              -DOPENMM_BUILD_EXAMPLES=OFF \
              -DOPENCL_LIBRARY=/usr/local/cuda-11.0/lib64/libOpenCL.so \
              -DCUDA_CUDART_LIBRARY=/usr/local/cuda-11.0/lib64/libcudart.so \
              -DCUDA_NVCC_EXECUTABLE=/usr/local/cuda-11.0/bin/nvcc \
              -DCUDA_SDK_ROOT_DIR=/usr/local/cuda-11.0/ \
              -DCUDA_TOOLKIT_INCLUDE=/usr/local/cuda-11.0/include \
              -DCUDA_TOOLKIT_ROOT_DIR=/usr/local/cuda-11.0/ \

          - name: Linux CUDA 11.1
            os: ubuntu-latest
            python-version: "3.6"
            OPENCL: false
            cuda-version: "11.1"
            CMAKE_FLAGS: |
              -DOPENMM_BUILD_CUDA_TESTS=OFF \
              -DOPENMM_BUILD_OPENCL_TESTS=OFF \
              -DOPENMM_BUILD_CPU_LIB=OFF \
              -DOPENMM_BUILD_PYTHON_WRAPPERS=OFF \
              -DOPENMM_BUILD_REFERENCE_TESTS=OFF \
              -DOPENMM_BUILD_SERIALIZATION_TESTS=OFF \
              -DOPENMM_BUILD_C_AND_FORTRAN_WRAPPERS=OFF \
              -DOPENMM_BUILD_EXAMPLES=OFF \
              -DOPENCL_LIBRARY=/usr/local/cuda-11.1/lib64/libOpenCL.so \
              -DCUDA_CUDART_LIBRARY=/usr/local/cuda-11.1/lib64/libcudart.so \
              -DCUDA_NVCC_EXECUTABLE=/usr/local/cuda-11.1/bin/nvcc \
              -DCUDA_SDK_ROOT_DIR=/usr/local/cuda-11.1/ \
              -DCUDA_TOOLKIT_INCLUDE=/usr/local/cuda-11.1/include \
              -DCUDA_TOOLKIT_ROOT_DIR=/usr/local/cuda-11.1/ \

          - name: Linux CUDA 11.2
            os: ubuntu-latest
            python-version: "3.6"
            OPENCL: false
            cuda-version: "11.2"
            CMAKE_FLAGS: |
              -DOPENMM_BUILD_CUDA_TESTS=OFF \
              -DOPENMM_BUILD_OPENCL_TESTS=OFF \
              -DOPENMM_BUILD_CPU_LIB=OFF \
              -DOPENMM_BUILD_PYTHON_WRAPPERS=OFF \
              -DOPENMM_BUILD_REFERENCE_TESTS=OFF \
              -DOPENMM_BUILD_SERIALIZATION_TESTS=OFF \
              -DOPENMM_BUILD_C_AND_FORTRAN_WRAPPERS=OFF \
              -DOPENMM_BUILD_EXAMPLES=OFF \
              -DOPENCL_LIBRARY=/usr/local/cuda-11.2/lib64/libOpenCL.so \
              -DCUDA_CUDART_LIBRARY=/usr/local/cuda-11.2/lib64/libcudart.so \
              -DCUDA_NVCC_EXECUTABLE=/usr/local/cuda-11.2/bin/nvcc \
              -DCUDA_SDK_ROOT_DIR=/usr/local/cuda-11.2/ \
              -DCUDA_TOOLKIT_INCLUDE=/usr/local/cuda-11.2/include \
              -DCUDA_TOOLKIT_ROOT_DIR=/usr/local/cuda-11.2/ \

          - name: Linux AMD OpenCL
            os: ubuntu-latest
            python-version: "3.6"
            OPENCL: true
            cuda-version: ""
            CMAKE_FLAGS: |
              -DOPENMM_BUILD_OPENCL_LIB=ON \
              -DOPENMM_BUILD_OPENCL_TESTS=ON \
              -DOPENMM_BUILD_STATIC_LIB=OFF \
              -DOPENMM_BUILD_CPU_LIB=OFF \
              -DOPENMM_BUILD_REFERENCE_TESTS=OFF \
              -DOPENMM_BUILD_SERIALIZATION_TESTS=OFF \
              -DOPENMM_BUILD_PME_PLUGIN=OFF \
              -DOPENMM_BUILD_AMOEBA_PLUGIN=OFF \
              -DOPENMM_BUILD_PYTHON_WRAPPERS=OFF \
              -DOPENMM_BUILD_C_AND_FORTRAN_WRAPPERS=OFF \
              -DOPENMM_BUILD_EXAMPLES=OFF \
              -DOPENCL_INCLUDE_DIR=${GITHUB_WORKSPACE}/AMDAPPSDK/include \
              -DOPENCL_LIBRARY=${GITHUB_WORKSPACE}/AMDAPPSDK/lib/x86_64/libOpenCL.so \

          - name: Linux CPU Python 3.6 with static lib
            os: ubuntu-latest
            python-version: "3.6"
            OPENCL: false
            cuda-version: ""
            CC: $CCACHE/clang
            CXX: $CCACHE/clang++
            CMAKE_FLAGS: |
              -DOPENMM_BUILD_STATIC_LIB=ON \
              -DOPENMM_BUILD_OPENCL_LIB=OFF \
              -DOPENMM_BUILD_OPENCL_TESTS=OFF \

          - name: Linux CPU Python 3.6
            python-version: "3.6"
            os: ubuntu-latest
            OPENCL: false
            cuda-version: ""
            CMAKE_FLAGS: |
              -DOPENMM_BUILD_OPENCL_LIB=OFF \
              -DOPENMM_BUILD_OPENCL_TESTS=OFF \

          - name: Linux CPU Python 3.7
            python-version: "3.7"
            os: ubuntu-latest
            OPENCL: false
            cuda-version: ""
            CMAKE_FLAGS: |
              -DOPENMM_BUILD_OPENCL_LIB=OFF \
              -DOPENMM_BUILD_OPENCL_TESTS=OFF \

          - name: Linux CPU Python 3.8
            python-version: "3.8"
            os: ubuntu-latest
            OPENCL: false
            cuda-version: ""
            CMAKE_FLAGS: |
              -DOPENMM_BUILD_OPENCL_LIB=OFF \
              -DOPENMM_BUILD_OPENCL_TESTS=OFF \

          - name: Linux CPU Python 3.9
            python-version: "3.9"
            os: ubuntu-latest
            OPENCL: false
            cuda-version: ""
            CMAKE_FLAGS: |
              -DOPENMM_BUILD_OPENCL_LIB=OFF \
              -DOPENMM_BUILD_OPENCL_TESTS=OFF \

          - name: MacOS OpenCL
            python-version: "3.6"
            os: macos-latest
            OPENCL: true
            cuda-version: ""
            CMAKE_FLAGS: |
              -DOPENMM_BUILD_OPENCL_LIB=ON \
              -DOPENMM_BUILD_OPENCL_TESTS=OFF \
              -DOPENMM_BUILD_STATIC_LIB=OFF \
              -DOPENMM_BUILD_CPU_LIB=OFF \
              -DOPENMM_BUILD_REFERENCE_TESTS=OFF \
              -DOPENMM_BUILD_SERIALIZATION_TESTS=OFF \
              -DOPENMM_BUILD_PME_PLUGIN=OFF \
              -DOPENMM_BUILD_AMOEBA_PLUGIN=OFF \
              -DOPENMM_BUILD_PYTHON_WRAPPERS=OFF \
              -DOPENMM_BUILD_C_AND_FORTRAN_WRAPPERS=OFF \
              -DOPENMM_BUILD_EXAMPLES=OFF \

          - name: MacOS CPU Python 3.6
            python-version: "3.6"
            os: macos-latest
            OPENCL: false
            cuda-version: ""
            CMAKE_FLAGS: |
              -DOPENMM_BUILD_OPENCL_LIB=OFF \
              -DOPENMM_BUILD_OPENCL_TESTS=OFF \

          - name: MacOS CPU Python 3.7
            python-version: "3.7"
            os: macos-latest
            OPENCL: false
            cuda-version: ""
            CMAKE_FLAGS: |
              -DOPENMM_BUILD_OPENCL_LIB=OFF \
              -DOPENMM_BUILD_OPENCL_TESTS=OFF \

          - name: MacOS CPU Python 3.8
            python-version: "3.8"
            os: macos-latest
            OPENCL: false
            cuda-version: ""
            CMAKE_FLAGS: |
              -DOPENMM_BUILD_OPENCL_LIB=OFF \
              -DOPENMM_BUILD_OPENCL_TESTS=OFF \

          - name: MacOS CPU Python 3.9
            python-version: "3.9"
            os: macos-latest
            OPENCL: false
            cuda-version: ""
            CMAKE_FLAGS: |
              -DOPENMM_BUILD_OPENCL_LIB=OFF \
              -DOPENMM_BUILD_OPENCL_TESTS=OFF \

          # - name: ppc64le
          #   python-version: "3.8"
          #   os: ubuntu-latest
          #   OPENCL: false
          #   cuda-version: ""
          #   CMAKE_FLAGS: ""

          # - name: aarch64
          #   python-version: "3.8"
          #   os: ubuntu-latest
          #   OPENCL: false
          #   cuda-version: ""
          #   CMAKE_FLAGS: ""

    steps:
      - uses: actions/checkout@v2

      - uses: conda-incubator/setup-miniconda@v2
        name: "Prepare base dependencies"
        with:
          python-version: ${{ matrix.python-version }}
          activate-environment: build
          environment-file: devtools/ci/gh-actions/conda-envs/build-${{ matrix.os }}.yml
          auto-activate-base: false

      - name: "Install CUDA on Ubuntu (if needed)"
        if: matrix.cuda-version != '' && startsWith(matrix.os, 'ubuntu')
        env:
          CUDA_VERSION: ${{ matrix.cuda-version }}
        run: source devtools/ci/gh-actions/scripts/install_cuda.sh

      - name: "Install OpenCL on Ubuntu (if needed)"
        if: matrix.OPENCL == true && startsWith(matrix.os, 'ubuntu')
        run: source devtools/ci/gh-actions/scripts/install_amd_opencl.sh

      - name: "Set SDK on MacOS (if needed)"
        if: startsWith(matrix.os, 'macos')
        run: |
          max_retry=5
          tried=0
          until source devtools/ci/gh-actions/scripts/install_macos_sdk.sh; do
            sleep 5
            [[ tried -eq $max_retry ]] && echo "Failed!" && exit 1
            echo "Trying again... Attempt #$tried"
            ((tried++))
          done

      - name: "Configure build with CMake"
        shell: bash -l {0}
        run: |
          mkdir build
          cd build
          cmake .. \
            -DCMAKE_INSTALL_PREFIX=${CONDA_PREFIX} \
            -DCMAKE_PREFIX_PATH=${CONDA_PREFIX} \
            ${{ matrix.CMAKE_FLAGS }}

      - name: "Build OpenMM"
        shell: bash -l {0}
        run: |
          cd build
          make -j2 install

      - name: "Build Python wrappers"
        shell: bash -l {0}
        if: ${{ !contains(matrix.CMAKE_FLAGS, 'OPENMM_BUILD_PYTHON_WRAPPERS=OFF') }}
        run: |
          cd build
          make -j2 PythonInstall

      - name: "Test OpenMM"
        shell: bash -l {0}
        id: testcore
        run: |
          set -x
          cd build
          python ../devtools/run-ctest.py --parallel 2 --timeout 600 --job-duration 300

          if [[ ${{ matrix.os }} == ubuntu-* ]]; then SHLIB=so; else SHLIB=dylib; fi
          # This is always built
          test -f ${CONDA_PREFIX}/lib/libOpenMM.$SHLIB
          # With CUDA, we _expect_ CUDA plugins :)
          if [[ "${{ matrix.cuda-version }}" != "" ]]; then
            test -f ${CONDA_PREFIX}/lib/plugins/libOpenMMCUDA.$SHLIB
            # TODO: Check with Peter why this is not there. Maybe we need an extra flag?
            # test -f ${CONDA_PREFIX}/lib/plugins/libOpenMMCudaCompiler.$SHLIB
          fi
          # OpenCL should also be there for CUDA and, well, OpenCL
          if [[ "${{ matrix.cuda-version }}" != "" || ${{ matrix.OPENCL }} == true ]]; then
            test -f ${CONDA_PREFIX}/lib/plugins/libOpenMMOpenCL.$SHLIB
          # CPU builds should provide both CPU and PME
          else
            test -f ${CONDA_PREFIX}/lib/plugins/libOpenMMCPU.$SHLIB
            test -f ${CONDA_PREFIX}/lib/plugins/libOpenMMPME.$SHLIB
          fi

      - name: "Test Python wrappers"
        shell: bash -l {0}
        if: ${{ !contains(matrix.CMAKE_FLAGS, 'OPENMM_BUILD_PYTHON_WRAPPERS=OFF') && (steps.testcore.outcome == 'failure' || steps.testcore.outcome == 'success') }}
        run: |
          set -x
          python -m simtk.testInstallation
          python -c "import simtk.openmm as mm; print('---Loaded---', *mm.pluginLoadedLibNames, '---Failed---', *mm.Platform.getPluginLoadFailures(), sep='\n')"
          cd build/python/tests
          python -m pytest -v -n 2

  windows:
    runs-on: windows-latest
    name: ${{ matrix.name }}
    env:
      # `make pythoninstall` will always put the files in the workspace unit
      # workaround: make sure conda envs are created in the same unit as workspace
      CONDA_ENVS_PATH: "D:/conda-envs"
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: Windows CUDA 10.0
            python-version: "3.6"
            cuda-version: "10.0"
            CMAKE_FLAGS: |
              -DCUDA_TOOLKIT_ROOT_DIR="%CUDA_TOOLKIT_ROOT_DIR%" ^
              -DOPENMM_BUILD_CUDA_TESTS=OFF ^
              -DOPENMM_BUILD_OPENCL_TESTS=OFF ^
              -DOPENMM_BUILD_CPU_LIB=OFF ^
              -DOPENMM_BUILD_PYTHON_WRAPPERS=OFF ^
              -DOPENMM_BUILD_REFERENCE_TESTS=OFF ^
              -DOPENMM_BUILD_SERIALIZATION_TESTS=OFF ^
              -DOPENMM_BUILD_C_AND_FORTRAN_WRAPPERS=OFF ^
              -DOPENMM_BUILD_EXAMPLES=OFF ^

          - name: Windows CUDA 10.1
            python-version: "3.6"
            cuda-version: "10.1"
            CMAKE_FLAGS: |
              -DCUDA_TOOLKIT_ROOT_DIR="%CUDA_TOOLKIT_ROOT_DIR%" ^
              -DOPENMM_BUILD_CUDA_TESTS=OFF ^
              -DOPENMM_BUILD_OPENCL_TESTS=OFF ^
              -DOPENMM_BUILD_CPU_LIB=OFF ^
              -DOPENMM_BUILD_PYTHON_WRAPPERS=OFF ^
              -DOPENMM_BUILD_REFERENCE_TESTS=OFF ^
              -DOPENMM_BUILD_SERIALIZATION_TESTS=OFF ^
              -DOPENMM_BUILD_C_AND_FORTRAN_WRAPPERS=OFF ^
              -DOPENMM_BUILD_EXAMPLES=OFF ^

          - name: Windows CUDA 10.2
            python-version: "3.6"
            cuda-version: "10.2"
            CMAKE_FLAGS: |
              -DCUDA_TOOLKIT_ROOT_DIR="%CUDA_TOOLKIT_ROOT_DIR%" ^
              -DOPENMM_BUILD_CUDA_TESTS=OFF ^
              -DOPENMM_BUILD_OPENCL_TESTS=OFF ^
              -DOPENMM_BUILD_CPU_LIB=OFF ^
              -DOPENMM_BUILD_PYTHON_WRAPPERS=OFF ^
              -DOPENMM_BUILD_REFERENCE_TESTS=OFF ^
              -DOPENMM_BUILD_SERIALIZATION_TESTS=OFF ^
              -DOPENMM_BUILD_C_AND_FORTRAN_WRAPPERS=OFF ^
              -DOPENMM_BUILD_EXAMPLES=OFF ^

          - name: Windows CUDA 11.0
            python-version: "3.6"
            cuda-version: "11.0"
            CMAKE_FLAGS: |
              -DCUDA_TOOLKIT_ROOT_DIR="%CUDA_TOOLKIT_ROOT_DIR%" ^
              -DOPENMM_BUILD_CUDA_TESTS=OFF ^
              -DOPENMM_BUILD_OPENCL_TESTS=OFF ^
              -DOPENMM_BUILD_CPU_LIB=OFF ^
              -DOPENMM_BUILD_PYTHON_WRAPPERS=OFF ^
              -DOPENMM_BUILD_REFERENCE_TESTS=OFF ^
              -DOPENMM_BUILD_SERIALIZATION_TESTS=OFF ^
              -DOPENMM_BUILD_C_AND_FORTRAN_WRAPPERS=OFF ^
              -DOPENMM_BUILD_EXAMPLES=OFF ^

          - name: Windows CUDA 11.1
            python-version: "3.6"
            cuda-version: "11.1"
            CMAKE_FLAGS: |
              -DCUDA_TOOLKIT_ROOT_DIR="%CUDA_TOOLKIT_ROOT_DIR%" ^
              -DOPENMM_BUILD_CUDA_TESTS=OFF ^
              -DOPENMM_BUILD_OPENCL_TESTS=OFF ^
              -DOPENMM_BUILD_CPU_LIB=OFF ^
              -DOPENMM_BUILD_PYTHON_WRAPPERS=OFF ^
              -DOPENMM_BUILD_REFERENCE_TESTS=OFF ^
              -DOPENMM_BUILD_SERIALIZATION_TESTS=OFF ^
              -DOPENMM_BUILD_C_AND_FORTRAN_WRAPPERS=OFF ^
              -DOPENMM_BUILD_EXAMPLES=OFF ^

          - name: Windows CUDA 11.2
            python-version: "3.6"
            cuda-version: "11.2"
            CMAKE_FLAGS: |
              -DCUDA_TOOLKIT_ROOT_DIR="%CUDA_TOOLKIT_ROOT_DIR%" ^
              -DOPENMM_BUILD_CUDA_TESTS=OFF ^
              -DOPENMM_BUILD_OPENCL_TESTS=OFF ^
              -DOPENMM_BUILD_CPU_LIB=OFF ^
              -DOPENMM_BUILD_PYTHON_WRAPPERS=OFF ^
              -DOPENMM_BUILD_REFERENCE_TESTS=OFF ^
              -DOPENMM_BUILD_SERIALIZATION_TESTS=OFF ^
              -DOPENMM_BUILD_C_AND_FORTRAN_WRAPPERS=OFF ^
              -DOPENMM_BUILD_EXAMPLES=OFF ^

          - name: Windows CPU Python 3.6 with static lib
            python-version: "3.6"
            cuda-version: ""
            CMAKE_FLAGS: |
              -DOPENMM_BUILD_STATIC_LIB=ON ^
              -DOPENMM_BUILD_OPENCL_LIB=OFF ^
              -DOPENMM_BUILD_OPENCL_TESTS=OFF ^

          - name: Windows CPU Python 3.6
            python-version: "3.6"
            cuda-version: ""
            CMAKE_FLAGS: |
              -DOPENMM_BUILD_OPENCL_LIB=OFF ^
              -DOPENMM_BUILD_OPENCL_TESTS=OFF ^

          - name: Windows CPU Python 3.7
            python-version: "3.7"
            cuda-version: ""
            CMAKE_FLAGS: |
              -DOPENMM_BUILD_OPENCL_LIB=OFF ^
              -DOPENMM_BUILD_OPENCL_TESTS=OFF ^

          - name: Windows CPU Python 3.8
            python-version: "3.8"
            cuda-version: ""
            CMAKE_FLAGS: |
              -DOPENMM_BUILD_OPENCL_LIB=OFF ^
              -DOPENMM_BUILD_OPENCL_TESTS=OFF ^

          - name: Windows CPU Python 3.9
            python-version: "3.9"
            cuda-version: ""
            CMAKE_FLAGS: |
              -DOPENMM_BUILD_OPENCL_LIB=OFF ^
              -DOPENMM_BUILD_OPENCL_TESTS=OFF ^

    steps:
      - uses: actions/checkout@v2

      - uses: conda-incubator/setup-miniconda@v2
        name: "Prepare base dependencies"
        with:
          python-version: ${{ matrix.python-version }}
          activate-environment: build
          environment-file: devtools/ci/gh-actions/conda-envs/build-windows-latest.yml
          auto-activate-base: false

      - name: "Install CUDA (if needed)"
        shell: cmd /C call {0}
        if: matrix.cuda-version != ''
        env:
          CUDA_VERSION: ${{ matrix.cuda-version }}
        run: call devtools/ci/gh-actions/scripts/install_cuda.bat

      - name: "Configure build with CMake"
        shell: cmd /C call {0}
        env:
          CMAKE_FLAGS: ${{ matrix.CMAKE_FLAGS }}
        run: |
          mkdir build
          cd build
          cmake -G "NMake Makefiles JOM" ^
                -DCMAKE_BUILD_TYPE=Release ^
                -DCMAKE_INSTALL_PREFIX=%CONDA_PREFIX%/Library ^
                -DCMAKE_PREFIX_PATH=%CONDA_PREFIX%/Library ^
                -DOPENCL_INCLUDE_DIR=%CONDA_PREFIX%/Library/include ^
                -DOPENCL_LIBRARY=%CONDA_PREFIX%/Library/lib/OpenCL.lib ^
                -DCMAKE_CXX_COMPILER=cl.exe ^
                -DCMAKE_C_COMPILER=cl.exe ^
                -DOPENMM_BUILD_EXAMPLES=OFF ^
                -DOPENMM_BUILD_OPENCL_TESTS=OFF ^
                %CMAKE_FLAGS%
                ..

      - name: "Build OpenMM"
        shell: cmd /C call {0}
        run: |
          cd build
          jom -j 2
          if errorlevel 1 exit 1
          jom -j 2 install
          if errorlevel 1 exit 1

      - name: "Build Python wrappers"
        shell: cmd /C call {0}
        if: ${{ !contains(matrix.CMAKE_FLAGS, 'OPENMM_BUILD_PYTHON_WRAPPERS=OFF') }}
        run: |
          cd build
          jom -j 2 PythonInstall

      - name: "Test OpenMM"
        shell: cmd /C call {0}
        id: testcore
        run: |
          @echo on
          cd build
          python ..\devtools\run-ctest.py --parallel 2 --timeout 600 --job-duration 300
          if errorlevel 1 exit 1

          if not exist %CONDA_PREFIX%/Library/lib/OpenMM.lib exit 1
          if not "${{ matrix.cuda-version }}" == "" (
            if not exist %CONDA_PREFIX%/Library/lib/plugins/OpenMMCUDA.lib exit 1
            if not exist %CONDA_PREFIX%/Library/lib/plugins/OpenMMOpenCL.lib exit 1
            if not exist %CONDA_PREFIX%/Library/lib/plugins/OpenMMCudaCompiler.lib exit 1
          ) else (
            if not exist %CONDA_PREFIX%/Library/lib/plugins/OpenMMCPU.lib exit 1
            if not exist %CONDA_PREFIX%/Library/lib/plugins/OpenMMPME.lib exit 1
          )

      - name: "Test Python wrappers"
        shell: cmd /C call {0}
        if: ${{ !contains(matrix.CMAKE_FLAGS, 'OPENMM_BUILD_PYTHON_WRAPPERS=OFF') && (steps.testcore.outcome == 'failure' || steps.testcore.outcome == 'success') }}
        run: |
          @echo on
          python -m simtk.testInstallation
          python -c "import simtk.openmm as mm; print('---Loaded---', *mm.pluginLoadedLibNames, '---Failed---', *mm.Platform.getPluginLoadFailures(), sep='\n')"
          cd build\python\tests
          python -m pytest -v -n 2

  docker:
    name: ${{ matrix.name }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: ppc64le
            docker-image: quay.io/condaforge/linux-anvil-ppc64le-cuda
            cuda-version: "10.2"

          - name: aarch64
            docker-image: quay.io/condaforge/linux-anvil-aarch64
            cuda-version: ""

    steps:
    - uses: actions/checkout@v2

    - name: Prepare docker
      run: |
        docker run --rm --privileged multiarch/qemu-user-static:register --reset --credential yes
        ls /proc/sys/fs/binfmt_misc/

    - name: Run docker
      env:
        CUDA_VER: ${{ matrix.cuda-version }}
        DOCKER_IMAGE: ${{ matrix.docker-image }}
      run: |
        set -x
        HOST_USER_ID=$(id -u)
        test ! -z ${CUDA_VER} && DOCKER_IMAGE+=":${CUDA_VER}"
        docker run \
          -v "${GITHUB_WORKSPACE}":/home/conda/workspace:rw,z \
          -e HOST_USER_ID \
          -e CPU_COUNT \
          -e CUDA_VER \
          ${DOCKER_IMAGE} \
          bash \
          /home/conda/workspace/devtools/ci/gh-actions/scripts/run_steps_inside_docker_image.sh

        test -f docker_steps_run_successfully


  docs:
    name: Docs
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - uses: conda-incubator/setup-miniconda@v2
        name: "Prepare base dependencies"
        with:
          python-version: "3.6"
          activate-environment: build
          environment-file: devtools/ci/gh-actions/conda-envs/docs.yml
          auto-activate-base: false

      - name: "Install TeX"
        run: |
          set -x
          echo 'APT::Acquire::Retries "5";' | sudo tee /etc/apt/apt.conf.d/80-retries
          sudo apt-get install -y \
            latexmk \
            texlive-latex-recommended \
            texlive-fonts-recommended \
            texlive-latex-extra \
            texlive-xetex \
            fonts-freefont-otf

      - name: "Configure build with CMake"
        shell: bash -l {0}
        run: |
          mkdir build
          cd build
          cmake .. \
            -DCMAKE_INSTALL_PREFIX=${CONDA_PREFIX} \
            -DCMAKE_PREFIX_PATH=${CONDA_PREFIX} \
            -DOPENMM_GENERATE_API_DOCS=ON \
            -DOPENMM_BUILD_PYTHON_WRAPPERS=ON \
            -DOPENMM_BUILD_OPENCL_LIB=OFF \
            -DOPENMM_BUILD_REFERENCE_TESTS=OFF \
            -DOPENMM_BUILD_CPU_TESTS=OFF \
            -DOPENMM_BUILD_CUDA_TESTS=OFF \
            -DOPENMM_BUILD_OPENCL_TESTS=OFF \
            -DOPENMM_BUILD_SERIALIZATION_TESTS=OFF \
            -DOPENMM_BUILD_C_AND_FORTRAN_WRAPPERS=OFF \
            -DOPENMM_BUILD_EXAMPLES=OFF

      - name: Build docs
        shell: bash -l {0}
        run: |
          set -x
          cd build
          make -j2 install PythonInstall
          make -j2 sphinxhtml
          make -j2 sphinxpdf
          make -j2 C++ApiDocs
          make -j2 PythonApiDocs
          mkdir -p api-docs
          mv sphinx-docs/userguide/html api-docs/userguide
          mv sphinx-docs/userguide/latex/*.pdf api-docs/userguide/
          mv sphinx-docs/developerguide/html api-docs/developerguide
          mv sphinx-docs/developerguide/latex/*.pdf api-docs/developerguide/
          mv api-python api-docs
          mv api-c++ api-docs

      - name: "Deploy docs (only on master)"
        if: ${{ github.ref == 'refs/heads/master' && github.event_name != 'schedule' }}
        uses: jakejarvis/s3-sync-action@master
        with:
          args: --acl public-read --follow-symlinks --delete
        env:
          AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: 'us-west-1'
          SOURCE_DIR: 'build/api-docs'
          DEST_DIR: 'development'

      - name: Check 404s
        shell: bash -l {0}
        run: |
          set -x
          set +e
          npx linkinator ./build/api-docs/api-c++/ --recurse --timeout=5000
          exitcode=$?
          npx linkinator ./build/api-docs/api-python/ --recurse --timeout=5000
          exitcode+="+$?"
          npx linkinator ./build/api-docs/developerguide/ --recurse --timeout=5000
          exitcode+="+$?"
          npx linkinator ./build/api-docs/userguide/ --recurse --timeout=5000
          exitcode+="+$?"
          npx linkinator ./README.md --markdown
          exitcode+="+$?"
          exit $(echo $exitcode | bc)