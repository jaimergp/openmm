name: CI

on:
  push:
    branches:
      - "master"
  pull_request:
    branches:
      - "master"
  schedule:
    # Nightly tests run on master by default:
    #   Scheduled workflows run on the latest commit on the default or base branch.
    #   (from https://help.github.com/en/actions/reference/events-that-trigger-workflows#scheduled-events-schedule)
    - cron: "0 0 * * *"


jobs:
  unix:
    runs-on: ${{ matrix.os }}
    name: ${{ matrix.name }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: Linux CUDA 10.0
            os: ubuntu-latest
            python-version: "3.6"
            CUDA: true
            OPENCL: false
            CUDA_VERSION: "10.0"
            # CC: $CCACHE/gcc
            # CXX: $CCACHE/g++
            CMAKE_FLAGS: |
              -DOPENMM_BUILD_CUDA_TESTS=OFF \
              -DOPENMM_BUILD_OPENCL_TESTS=OFF \
              -DOPENMM_BUILD_CPU_LIB=OFF \
              -DOPENMM_BUILD_PYTHON_WRAPPERS=OFF \
              -DOPENMM_BUILD_REFERENCE_TESTS=OFF \
              -DOPENMM_BUILD_SERIALIZATION_TESTS=OFF \
              -DOPENMM_BUILD_C_AND_FORTRAN_WRAPPERS=OFF \
              -DOPENMM_BUILD_EXAMPLES=OFF \
              -DOPENCL_LIBRARY=/usr/local/cuda-10.0/lib64/libOpenCL.so \
              -DCUDA_CUDART_LIBRARY=/usr/local/cuda-10.0/lib64/libcudart.so \
              -DCUDA_NVCC_EXECUTABLE=/usr/local/cuda-10.0/bin/nvcc \
              -DCUDA_SDK_ROOT_DIR=/usr/local/cuda-10.0/ \
              -DCUDA_TOOLKIT_INCLUDE=/usr/local/cuda-10.0/include \
              -DCUDA_TOOLKIT_ROOT_DIR=/usr/local/cuda-10.0/ \

          - name: Linux CUDA 10.1
            os: ubuntu-latest
            python-version: "3.6"
            CUDA: true
            OPENCL: false
            CUDA_VERSION: "10.1"
            # CC: $CCACHE/gcc
            # CXX: $CCACHE/g++
            CMAKE_FLAGS: |
              -DOPENMM_BUILD_CUDA_TESTS=OFF \
              -DOPENMM_BUILD_OPENCL_TESTS=OFF \
              -DOPENMM_BUILD_CPU_LIB=OFF \
              -DOPENMM_BUILD_PYTHON_WRAPPERS=OFF \
              -DOPENMM_BUILD_REFERENCE_TESTS=OFF \
              -DOPENMM_BUILD_SERIALIZATION_TESTS=OFF \
              -DOPENMM_BUILD_C_AND_FORTRAN_WRAPPERS=OFF \
              -DOPENMM_BUILD_EXAMPLES=OFF \
              -DOPENCL_LIBRARY=/usr/local/cuda-10.1/lib64/libOpenCL.so \
              -DCUDA_CUDART_LIBRARY=/usr/local/cuda-10.1/lib64/libcudart.so \
              -DCUDA_NVCC_EXECUTABLE=/usr/local/cuda-10.1/bin/nvcc \
              -DCUDA_SDK_ROOT_DIR=/usr/local/cuda-10.1/ \
              -DCUDA_TOOLKIT_INCLUDE=/usr/local/cuda-10.1/include \
              -DCUDA_TOOLKIT_ROOT_DIR=/usr/local/cuda-10.1/ \

          - name: Linux CUDA 10.2
            os: ubuntu-latest
            python-version: "3.6"
            CUDA: true
            OPENCL: false
            CUDA_VERSION: "10.2"
            # CC: $CCACHE/gcc
            # CXX: $CCACHE/g++
            CMAKE_FLAGS: |
              -DOPENMM_BUILD_CUDA_TESTS=OFF \
              -DOPENMM_BUILD_OPENCL_TESTS=OFF \
              -DOPENMM_BUILD_CPU_LIB=OFF \
              -DOPENMM_BUILD_PYTHON_WRAPPERS=OFF \
              -DOPENMM_BUILD_REFERENCE_TESTS=OFF \
              -DOPENMM_BUILD_SERIALIZATION_TESTS=OFF \
              -DOPENMM_BUILD_C_AND_FORTRAN_WRAPPERS=OFF \
              -DOPENMM_BUILD_EXAMPLES=OFF \
              -DOPENCL_LIBRARY=/usr/local/cuda-10.2/lib64/libOpenCL.so \
              -DCUDA_CUDART_LIBRARY=/usr/local/cuda-10.2/lib64/libcudart.so \
              -DCUDA_NVCC_EXECUTABLE=/usr/local/cuda-10.2/bin/nvcc \
              -DCUDA_SDK_ROOT_DIR=/usr/local/cuda-10.2/ \
              -DCUDA_TOOLKIT_INCLUDE=/usr/local/cuda-10.2/include \
              -DCUDA_TOOLKIT_ROOT_DIR=/usr/local/cuda-10.2/ \

          - name: Linux CUDA 11.0
            os: ubuntu-latest
            python-version: "3.6"
            CUDA: true
            OPENCL: false
            CUDA_VERSION: "11.0"
            # CC: $CCACHE/gcc
            # CXX: $CCACHE/g++
            CMAKE_FLAGS: |
              -DOPENMM_BUILD_CUDA_TESTS=OFF \
              -DOPENMM_BUILD_OPENCL_TESTS=OFF \
              -DOPENMM_BUILD_CPU_LIB=OFF \
              -DOPENMM_BUILD_PYTHON_WRAPPERS=OFF \
              -DOPENMM_BUILD_REFERENCE_TESTS=OFF \
              -DOPENMM_BUILD_SERIALIZATION_TESTS=OFF \
              -DOPENMM_BUILD_C_AND_FORTRAN_WRAPPERS=OFF \
              -DOPENMM_BUILD_EXAMPLES=OFF \
              -DOPENCL_LIBRARY=/usr/local/cuda-11.0/lib64/libOpenCL.so \
              -DCUDA_CUDART_LIBRARY=/usr/local/cuda-11.0/lib64/libcudart.so \
              -DCUDA_NVCC_EXECUTABLE=/usr/local/cuda-11.0/bin/nvcc \
              -DCUDA_SDK_ROOT_DIR=/usr/local/cuda-11.0/ \
              -DCUDA_TOOLKIT_INCLUDE=/usr/local/cuda-11.0/include \
              -DCUDA_TOOLKIT_ROOT_DIR=/usr/local/cuda-11.0/ \

          - name: Linux CUDA 11.1
            os: ubuntu-latest
            python-version: "3.6"
            CUDA: true
            OPENCL: false
            CUDA_VERSION: "11.1"
            # CC: $CCACHE/gcc
            # CXX: $CCACHE/g++
            CMAKE_FLAGS: |
              -DOPENMM_BUILD_CUDA_TESTS=OFF \
              -DOPENMM_BUILD_OPENCL_TESTS=OFF \
              -DOPENMM_BUILD_CPU_LIB=OFF \
              -DOPENMM_BUILD_PYTHON_WRAPPERS=OFF \
              -DOPENMM_BUILD_REFERENCE_TESTS=OFF \
              -DOPENMM_BUILD_SERIALIZATION_TESTS=OFF \
              -DOPENMM_BUILD_C_AND_FORTRAN_WRAPPERS=OFF \
              -DOPENMM_BUILD_EXAMPLES=OFF \
              -DOPENCL_LIBRARY=/usr/local/cuda-11.1/lib64/libOpenCL.so \
              -DCUDA_CUDART_LIBRARY=/usr/local/cuda-11.1/lib64/libcudart.so \
              -DCUDA_NVCC_EXECUTABLE=/usr/local/cuda-11.1/bin/nvcc \
              -DCUDA_SDK_ROOT_DIR=/usr/local/cuda-11.1/ \
              -DCUDA_TOOLKIT_INCLUDE=/usr/local/cuda-11.1/include \
              -DCUDA_TOOLKIT_ROOT_DIR=/usr/local/cuda-11.1/ \

          - name: Linux CUDA 11.2
            os: ubuntu-latest
            python-version: "3.6"
            CUDA: true
            OPENCL: false
            CUDA_VERSION: "11.2"
            # CC: $CCACHE/gcc
            # CXX: $CCACHE/g++
            CMAKE_FLAGS: |
              -DOPENMM_BUILD_CUDA_TESTS=OFF \
              -DOPENMM_BUILD_OPENCL_TESTS=OFF \
              -DOPENMM_BUILD_CPU_LIB=OFF \
              -DOPENMM_BUILD_PYTHON_WRAPPERS=OFF \
              -DOPENMM_BUILD_REFERENCE_TESTS=OFF \
              -DOPENMM_BUILD_SERIALIZATION_TESTS=OFF \
              -DOPENMM_BUILD_C_AND_FORTRAN_WRAPPERS=OFF \
              -DOPENMM_BUILD_EXAMPLES=OFF \
              -DOPENCL_LIBRARY=/usr/local/cuda-11.2/lib64/libOpenCL.so \
              -DCUDA_CUDART_LIBRARY=/usr/local/cuda-11.2/lib64/libcudart.so \
              -DCUDA_NVCC_EXECUTABLE=/usr/local/cuda-11.2/bin/nvcc \
              -DCUDA_SDK_ROOT_DIR=/usr/local/cuda-11.2/ \
              -DCUDA_TOOLKIT_INCLUDE=/usr/local/cuda-11.2/include \
              -DCUDA_TOOLKIT_ROOT_DIR=/usr/local/cuda-11.2/ \

          - name: Linux AMD OpenCL
            os: ubuntu-latest
            python-version: "3.6"
            OPENCL: true
            CUDA: false
            # CC: $CCACHE/gcc
            # CXX: $CCACHE/g++
            CMAKE_FLAGS: |
              -DOPENMM_BUILD_OPENCL_LIB=ON \
              -DOPENMM_BUILD_OPENCL_TESTS=ON \
              -DOPENMM_BUILD_STATIC_LIB=OFF \
              -DOPENMM_BUILD_CPU_LIB=OFF \
              -DOPENMM_BUILD_REFERENCE_TESTS=OFF \
              -DOPENMM_BUILD_SERIALIZATION_TESTS=OFF \
              -DOPENMM_BUILD_PME_PLUGIN=OFF \
              -DOPENMM_BUILD_AMOEBA_PLUGIN=OFF \
              -DOPENMM_BUILD_PYTHON_WRAPPERS=OFF \
              -DOPENMM_BUILD_C_AND_FORTRAN_WRAPPERS=OFF \
              -DOPENMM_BUILD_EXAMPLES=OFF \
              -DOPENCL_INCLUDE_DIR=${GITHUB_WORKSPACE}/AMDAPPSDK/include \
              -DOPENCL_LIBRARY=${GITHUB_WORKSPACE}/AMDAPPSDK/lib/x86_64/libOpenCL.so \

          - name: Linux CPU Python 3.6 with static lib
            os: ubuntu-latest
            python-version: "3.6"
            OPENCL: false
            CUDA: false
            CC: $CCACHE/clang
            CXX: $CCACHE/clang++
            CMAKE_FLAGS: |
              -DOPENMM_BUILD_STATIC_LIB=ON \
              -DOPENMM_BUILD_OPENCL_LIB=OFF \
              -DOPENMM_BUILD_OPENCL_TESTS=OFF \

          - name: Linux CPU Python 3.6
            python-version: "3.6"
            os: ubuntu-latest
            OPENCL: false
            CUDA: false
            # CC: $CCACHE/gcc
            # CXX: $CCACHE/g++
            CMAKE_FLAGS: |
              -DOPENMM_BUILD_OPENCL_LIB=OFF \
              -DOPENMM_BUILD_OPENCL_TESTS=OFF \

          # - name: Linux CPU Python 3.7
          #   python-version: "3.7"
          #   os: ubuntu-latest
          #   OPENCL: false
          #   CUDA: false
          #   # CC: $CCACHE/gcc
          #   # CXX: $CCACHE/g++
          #   CMAKE_FLAGS: |
          #     -DOPENMM_BUILD_OPENCL_LIB=OFF \
          #     -DOPENMM_BUILD_OPENCL_TESTS=OFF \

          # - name: Linux CPU Python 3.8
          #   python-version: "3.8"
          #   os: ubuntu-latest
          #   OPENCL: false
          #   CUDA: false
          #   # CC: $CCACHE/gcc
          #   # CXX: $CCACHE/g++
          #   CMAKE_FLAGS: |
          #     -DOPENMM_BUILD_OPENCL_LIB=OFF \
          #     -DOPENMM_BUILD_OPENCL_TESTS=OFF \

          # - name: Linux CPU Python 3.9
          #   python-version: "3.9"
          #   os: ubuntu-latest
          #   OPENCL: false
          #   CUDA: false
          #   # CC: $CCACHE/gcc
          #   # CXX: $CCACHE/g++
          #   CMAKE_FLAGS: |
          #     -DOPENMM_BUILD_OPENCL_LIB=OFF \
          #     -DOPENMM_BUILD_OPENCL_TESTS=OFF \

          - name: MacOS CPU Python 3.6
            python-version: "3.6"
            os: macos-latest
            OPENCL: false
            CUDA: false
            # CC: $CCACHE/gcc
            # CXX: $CCACHE/g++
            CMAKE_FLAGS: |
              -DOPENMM_BUILD_OPENCL_LIB=OFF \
              -DOPENMM_BUILD_OPENCL_TESTS=OFF \

          # - name: MacOS CPU Python 3.7
          #   python-version: "3.7"
          #   os: macos-latest
          #   OPENCL: false
          #   CUDA: false
          #   # CC: $CCACHE/gcc
          #   # CXX: $CCACHE/g++
          #   CMAKE_FLAGS: |
          #     -DOPENMM_BUILD_OPENCL_LIB=OFF \
          #     -DOPENMM_BUILD_OPENCL_TESTS=OFF \

          # - name: MacOS CPU Python 3.8
          #   python-version: "3.8"
          #   os: macos-latest
          #   OPENCL: false
          #   CUDA: false
          #   # CC: $CCACHE/gcc
          #   # CXX: $CCACHE/g++
          #   CMAKE_FLAGS: |
          #     -DOPENMM_BUILD_OPENCL_LIB=OFF \
          #     -DOPENMM_BUILD_OPENCL_TESTS=OFF \

          # - name: MacOS CPU Python 3.9
          #   python-version: "3.9"
          #   os: macos-latest
          #   OPENCL: false
          #   CUDA: false
          #   # CC: $CCACHE/gcc
          #   # CXX: $CCACHE/g++
          #   CMAKE_FLAGS: |
          #     -DOPENMM_BUILD_OPENCL_LIB=OFF \
          #     -DOPENMM_BUILD_OPENCL_TESTS=OFF \

          # - name: ppc64le
          #   python-version: "3.8"
          #   os: ubuntu-latest
          #   OPENCL: false
          #   CUDA: false
          #   CMAKE_FLAGS: ""

          # - name: aarch64
          #   python-version: "3.8"
          #   os: ubuntu-latest
          #   OPENCL: false
          #   CUDA: false
          #   CMAKE_FLAGS: ""

          # - name: Docs
          #   python-version: "3.6"
          #   os: ubuntu-latest
          #   OPENCL: false
          #   CUDA: false
          #   CC: $CCACHE/clang
          #   CXX: $CCACHE/clang++
          #   DOCS_DEPLOY: true
          #   CMAKE_FLAGS: |
          #     -DOPENMM_GENERATE_API_DOCS=ON \
          #     -DOPENMM_BUILD_CUDA_TESTS=OFF \
          #     -DOPENMM_BUILD_OPENCL_TESTS=OFF \
          #     -DOPENMM_BUILD_PYTHON_WRAPPERS=OFF \
          #     -DOPENMM_BUILD_REFERENCE_TESTS=OFF \
          #     -DOPENMM_BUILD_SERIALIZATION_TESTS=OFF \
          #     -DOPENMM_BUILD_C_AND_FORTRAN_WRAPPERS=OFF \
          #     -DOPENMM_BUILD_EXAMPLES=OFF \

    steps:
      - uses: actions/checkout@v2

      - uses: conda-incubator/setup-miniconda@v2
        name: "Prepare base dependencies"
        with:
          python-version: ${{ matrix.python-version }}
          activate-environment: build
          environment-file: devtools/conda-envs/build-${{ matrix.os }}.yml
          auto-activate-base: false

      - name: "Install CUDA on Ubuntu (if needed)"
        if: matrix.CUDA == true && startsWith(matrix.os, 'ubuntu')
        env:
          CUDA_VERSION: ${{ matrix.CUDA_VERSION }}
        run: |
          set -euxo pipefail
          sudo wget -O /etc/apt/preferences.d/cuda-repository-pin-600 https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/cuda-ubuntu1804.pin
          sudo apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/7fa2af80.pub
          sudo add-apt-repository "deb http://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/ /"
          sudo apt-get update -qq

          CUDA_APT=${CUDA_VERSION/./-}
          if [[ ${CUDA_VERSION} == 10.* ]]; then CUFFT="cuda-cufft"; else CUFFT="libcufft"; fi
          sudo apt-get install -y \
            libgl1-mesa-dev cuda-drivers cuda-driver-dev-${CUDA_APT} \
            cuda-compiler-${CUDA_APT} cuda-cudart-${CUDA_APT} ${CUFFT}-${CUDA_APT}
          sudo apt-get clean

          export CUDA_HOME=/usr/local/cuda-${CUDA_APT/-/.}
          export LD_LIBRARY_PATH=${CUDA_HOME}/lib64:${LD_LIBRARY_PATH:-}
          export PATH=${CUDA_HOME}/bin:${PATH}

          echo "CUDA_HOME=${CUDA_HOME}" >> ${GITHUB_ENV}
          echo "LD_LIBRARY_PATH=${LD_LIBRARY_PATH}" >> ${GITHUB_ENV}
          echo "PATH=${PATH}" >> ${GITHUB_ENV}

      - name: "Install OpenCL on Ubuntu (if needed)"
        if: matrix.OPENCL == true && startsWith(matrix.os, 'ubuntu')
        run: |
          set -euxo pipefail
          wget -q http://s3.amazonaws.com/omnia-ci/AMD-APP-SDKInstaller-v3.0.130.135-GA-linux64.tar.bz2
          tar -xjf AMD-APP-SDK*.tar.bz2
          AMDAPPSDK=${GITHUB_WORKSPACE}/AMDAPPSDK
          export OPENCL_VENDOR_PATH=${AMDAPPSDK}/etc/OpenCL/vendors
          mkdir -p ${OPENCL_VENDOR_PATH}
          sh AMD-APP-SDK*.sh --tar -xf -C ${AMDAPPSDK}
          echo libamdocl64.so > ${OPENCL_VENDOR_PATH}/amdocl64.icd
          export LD_LIBRARY_PATH=${AMDAPPSDK}/lib/x86_64:${LD_LIBRARY_PATH:-}
          chmod +x ${AMDAPPSDK}/bin/x86_64/clinfo
          ${AMDAPPSDK}/bin/x86_64/clinfo
          sudo apt-get install -y libgl1-mesa-dev

          echo "OPENCL_VENDOR_PATH=${OPENCL_VENDOR_PATH}" >> ${GITHUB_ENV}
          echo "LD_LIBRARY_PATH=${LD_LIBRARY_PATH}" >> ${GITHUB_ENV}

      - name: "Set SDK on MacOS (if needed)"
        if: startsWith(matrix.os, 'macos')
        run: |
          OSX_SDK_DIR="$(xcode-select -p)/Platforms/MacOSX.platform/Developer/SDKs"
          export MACOSX_DEPLOYMENT_TARGET=10.9
          export MACOSX_SDK_VERSION=10.9

          export CMAKE_OSX_SYSROOT="${OSX_SDK_DIR}/MacOSX${MACOSX_SDK_VERSION}.sdk"

          if [[ ! -d ${CMAKE_OSX_SYSROOT}} ]]; then
              echo "Downloading ${MACOSX_SDK_VERSION} sdk"
              curl -L -O https://github.com/phracker/MacOSX-SDKs/releases/download/10.15/MacOSX${MACOSX_SDK_VERSION}.sdk.tar.xz
              tar -xf MacOSX${MACOSX_SDK_VERSION}.sdk.tar.xz -C "$(dirname ${CMAKE_OSX_SYSROOT})"
          fi

          if [[ "$MACOSX_DEPLOYMENT_TARGET" == 10.* ]]; then
            # set minimum sdk version to our target
            plutil -replace MinimumSDKVersion -string ${MACOSX_SDK_VERSION} $(xcode-select -p)/Platforms/MacOSX.platform/Info.plist
            plutil -replace DTSDKName -string macosx${MACOSX_SDK_VERSION}internal $(xcode-select -p)/Platforms/MacOSX.platform/Info.plist
          fi

          echo "MACOSX_DEPLOYMENT_TARGET=${MACOSX_DEPLOYMENT_TARGET}" >> ${GITHUB_ENV}
          echo "CMAKE_OSX_SYSROOT=${MACOSX_DEPLOYMENT_TARGET}" >> ${GITHUB_ENV}
          echo "CMAKE_OSX_SYSROOT=${CMAKE_OSX_SYSROOT}" >> ${GITHUB_ENV}

      - name: "Configure build with CMake"
        shell: bash -l {0}
        run: |
          mkdir build
          cd build
          cmake .. \
            -DCMAKE_INSTALL_PREFIX=${CONDA_PREFIX} \
            -DCMAKE_PREFIX_PATH=${CONDA_PREFIX} \
            ${{ matrix.CMAKE_FLAGS }}

      - name: "Build OpenMM"
        shell: bash -l {0}
        run: |
          cd build
          make -j2 install

      - name: "Build Python wrappers"
        shell: bash -l {0}
        if: ${{ !contains(matrix.CMAKE_FLAGS, 'OPENMM_BUILD_PYTHON_WRAPPERS=OFF') }}
        run: |
          cd build
          make PythonInstall

      - name: "Test OpenMM"
        shell: bash -l {0}
        run: |
          cd build
          python ../devtools/run-ctest.py --parallel 2 --timeout 600 --job-duration 300

      - name: "Test Python wrappers"
        shell: bash -l {0}
        if: ${{ !contains(matrix.CMAKE_FLAGS, 'OPENMM_BUILD_PYTHON_WRAPPERS=OFF') && always() }}
        run: |
          python -m simtk.testInstallation
          cd build/python/tests
          python -m pytest -v -n 2

  windows:
    runs-on: windows-latest
    name: Windows Python ${{ matrix.python-version }}
    env:
      CONDA_ENVS_PATH: "D:/conda-envs"
    strategy:
      fail-fast: false
      matrix:
        python-version:
        - "3.6"
        # - "3.7"
        # - "3.8"
        # - "3.9"

    steps:
      - uses: actions/checkout@v2

      - uses: conda-incubator/setup-miniconda@v2
        name: "Prepare base dependencies"
        with:
          python-version: ${{ matrix.python-version }}
          activate-environment: build
          environment-file: devtools/conda-envs/build-windows-latest.yml
          auto-activate-base: false

      - name: "Configure build with CMake"
        shell: cmd /C call {0}
        run: |
          mkdir build
          cd build
          cmake -G "NMake Makefiles JOM" ^
                -DCMAKE_BUILD_TYPE=Release ^
                -DCMAKE_INSTALL_PREFIX=%CONDA_PREFIX%/Library ^
                -DCMAKE_PREFIX_PATH=%CONDA_PREFIX%/Library ^
                -DOPENCL_INCLUDE_DIR=%CONDA_PREFIX%/Library/include ^
                -DOPENCL_LIBRARY=%CONDA_PREFIX%/Library/lib/OpenCL.lib ^
                -DCMAKE_CXX_COMPILER=cl.exe ^
                -DCMAKE_C_COMPILER=cl.exe ^
                -DOPENMM_BUILD_EXAMPLES=OFF ^
                -DOPENMM_BUILD_OPENCL_TESTS=OFF ^
                ..

      - name: "Build OpenMM"
        shell: cmd /C call {0}
        run: |
          cd build
          jom -j 2
          if errorlevel 1 exit 1
          jom -j 2 install
          if errorlevel 1 exit 1

      - name: "Build Python wrappers"
        shell: cmd /C call {0}
        run: |
          cd build
          jom -j 2 PythonInstall

      - name: "Test OpenMM"
        shell: cmd /C call {0}
        run: |
          cd build
          python ..\devtools\run-ctest.py --parallel 2 --timeout 600 --job-duration 300

      - name: "Test Python wrappers"
        shell: cmd /C call {0}
        if: always()
        run: |
          set "PYTHONPATH=%CONDA_PREFIX%\Lib\site-packages"
          python -m simtk.testInstallation
          if errorlevel 1 exit 1
          cd build\python\tests
          python -m pytest -v -n 2
